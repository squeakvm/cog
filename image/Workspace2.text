(| pw |Utilities setAuthorInitials.pw := UIManager default requestPassword: 'Monticello password'.MCHttpRepository allSubInstancesDo: [ : rep |	rep user: Utilities authorInitials;	password: pw ])Smalltalk condenseChanges.(MCRepositoryGroup default instVarNamed: 'repositories') asArray do:	[:repo|	repo isValid ifFalse:		[MCRepositoryGroup default removeRepository: repo.		 Transcript cr; print: repo; flush]]Because Monticello doesn't handle shared pools well you may have to use the following to bind variables in shared pools correctly until Cog settles down: (doit below finds classes needing recompilation)Smalltalk allClasses do:	[:c| (c category includesSubString: 'VMMaker') ifTrue:			[Transcript cr; print: c; flush.			 c recompileAll. c class recompileAll]]This to force regeneration of all plugins(InterpreterPlugin withAllSubclassesDo:[:pl| pl touch])(Smalltalk allClasses select:	[:c| c sharedPools anySatisfy:		[:sp| (sp isBehavior ifTrue: [sp classPool] ifFalse: [sp]) keys anySatisfy: [:k| c classPool includesKey: k]]])("Selectively recompile methods, e.g. after a compiler change."| recompiled |recompiled := OrderedCollection new.Smalltalk allClasses do:	[:c|	{ c. c class } do:		[:b|		 b selectorsAndMethodsDo:			[:s :m| | nm |			"Restore the method association that Monticello loads can leave invalid.			 Needed to avoid false positives in the code comparison below."			(b isMeta not			 and: [m methodClassAssociation ~~ (Smalltalk bindingOf: c name)]) ifTrue:				[m methodClass: c].			nm := ((b compilerClass new						compile: (m getSourceFor: s in: b)						in: b						notifying: nil						ifFail: [self error: 'compilation error']) generate: #(0 0 0 0)).			m ~= nm ifTrue:				[recompiled add: { b. s }.				b recompile: s from: b]]]].Transcript clear; flush.recompiled do:	[:pair|	Transcript cr; print: pair first; nextPut: $>; nextPutAll: pair last].Transcript flush)